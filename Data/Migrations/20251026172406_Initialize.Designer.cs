// <auto-generated />
using System;
using ArticleTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArticleTask.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251026172406_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArticleTask.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("PublishStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("ArticleTask.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("datetime2");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(200)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5fc9a37-f31a-43b4-aad8-446880dbd6eb"),
                            DateOfBirth = new DateTime(2006, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sobhihazouri2006@gmail.com",
                            Expired = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FName = "Sobhi",
                            LName = "Hazouri",
                            Password = "CfDJ8PI5dPR7ADFDkcz2tsJhFxgDZwDRGDv0Sx77qOJV0mkxShw7SIFmM1CtBmHslPJ66Lv2AWjZVLrJCtDytgmaPonpef9_8Dr4v9qba2QKCPwMgxAtBvpzxPbpjCAz-8Lzmw",
                            Role = 0
                        });
                });

            modelBuilder.Entity("ArticleTask.Entities.UserPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPreferences", (string)null);
                });

            modelBuilder.Entity("ArticleTask.Entities.WorkingHoursManagement.UserWorkingHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkingHours", (string)null);
                });

            modelBuilder.Entity("ArticleTask.Entities.WorkingHoursManagement.WorkingHoursAtDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkingHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkingHoursId");

                    b.ToTable("WorkingHoursAtDay", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("ArticleTask.Entities.Article", b =>
                {
                    b.HasOne("ArticleTask.Entities.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArticleTask.Entities.UserPreference", b =>
                {
                    b.HasOne("ArticleTask.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArticleTask.Entities.WorkingHoursManagement.UserWorkingHours", b =>
                {
                    b.HasOne("ArticleTask.Entities.User", "User")
                        .WithMany("WorkingHours")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArticleTask.Entities.WorkingHoursManagement.WorkingHoursAtDay", b =>
                {
                    b.HasOne("ArticleTask.Entities.WorkingHoursManagement.UserWorkingHours", "WorkingHours")
                        .WithMany("WorkingHoursInDay")
                        .HasForeignKey("WorkingHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ArticleTask.Entities.WorkingHoursManagement.TimeSlot", "TimeSlot", b1 =>
                        {
                            b1.Property<Guid>("WorkingHoursAtDayId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeOnly>("EndAt")
                                .HasColumnType("time")
                                .HasColumnName("EndAt");

                            b1.Property<TimeOnly>("StartAt")
                                .HasColumnType("time")
                                .HasColumnName("StartAt");

                            b1.HasKey("WorkingHoursAtDayId");

                            b1.ToTable("WorkingHoursAtDay");

                            b1.WithOwner()
                                .HasForeignKey("WorkingHoursAtDayId");
                        });

                    b.Navigation("TimeSlot")
                        .IsRequired();

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("ArticleTask.Entities.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("ArticleTask.Entities.WorkingHoursManagement.UserWorkingHours", b =>
                {
                    b.Navigation("WorkingHoursInDay");
                });
#pragma warning restore 612, 618
        }
    }
}
